diff --git a/node_modules/mdx-bundler/dist/index.js b/node_modules/mdx-bundler/dist/index.js
index c4a3f5a..7598587 100644
--- a/node_modules/mdx-bundler/dist/index.js
+++ b/node_modules/mdx-bundler/dist/index.js
@@ -53,10 +53,12 @@ async function bundleMDX({
   bundleDirectory,
   bundlePath
 }) {
+  console.log('01: bundleMDX')
   /* c8 ignore start */
   if (_dirnameMessedUp.default && !process.env.ESBUILD_BINARY_PATH) {
     console.warn(`mdx-bundler warning: esbuild maybe unable to find its binary, if your build fails you'll need to set ESBUILD_BINARY_PATH. Learn more: https://github.com/kentcdodds/mdx-bundler/blob/main/README.md#nextjs-esbuild-enoent`);
   }
+  console.log('02: bundleMDX')
   /* c8 ignore stop */
   // @mdx-js/esbuild is a native ESM, and we're running in a CJS context. This is the
   // only way to import ESM within CJS
@@ -67,6 +69,7 @@ async function bundleMDX({
   }, {
     default: remarkFrontmatter
   }] = await Promise.all([import('@mdx-js/esbuild'), import('remark-frontmatter')]);
+  console.log('03: bundleMDX')
   let
   /** @type string */
   code,
@@ -79,11 +82,14 @@ async function bundleMDX({
   const absoluteFiles = {};
   const isWriting = typeof bundleDirectory === 'string';
   
+  console.log('04: bundleMDX')
   if (typeof bundleDirectory !== typeof bundlePath) {
+    console.log('04.5: bundleMDX')
     throw new Error('When using `bundleDirectory` or `bundlePath` the other must be set.');
   }
-
+  console.log('05: bundleMDX')
   if (typeof source === 'string') {
+    console.log('06: bundleMDX')
     // The user has supplied MDX source.
 
     /** @type any */
@@ -93,6 +99,7 @@ async function bundleMDX({
     entryPath = _path.default.join(cwd, `./_mdx_bundler_entry_point-${(0, _uuid.v4)()}.mdx`);
     absoluteFiles[entryPath] = source;
   } else if (typeof file === 'string') {
+    console.log('07: bundleMDX')
     // The user has supplied a file.
 
     /** @type any */
@@ -103,6 +110,7 @@ async function bundleMDX({
     entryPath = file;
     /* c8 ignore start */
   } else {
+    console.log('08: bundleMDX')
     // The user supplied neither file or source.
     // The typings should prevent reaching this point.
     // It is ignored from coverage as the tests wouldn't run in a way that can get here.
@@ -110,13 +118,13 @@ async function bundleMDX({
   }
   /* c8 ignore end*/
 
-
+  console.log('09: bundleMDX', entryPath)
   for (const [filepath, fileCode] of Object.entries(files)) {
     absoluteFiles[_path.default.join(cwd, filepath)] = fileCode;
   }
   /** @type import('esbuild').Plugin */
 
-
+  console.log('10: bundleMDX', entryPath)
   const inMemoryPlugin = {
     name: 'inMemory',
 
@@ -201,6 +209,7 @@ async function bundleMDX({
     }
 
   };
+  console.log('11: bundleMDX', entryPath)
   const buildOptions = esbuildOptions({
     entryPoints: [entryPath],
     write: isWriting,
@@ -239,7 +248,9 @@ async function bundleMDX({
     globalName: 'Component',
     minify: true
   }, matter.data);
+  console.log('running esbuild', entryPath)
   const bundled = await esbuild.build(buildOptions);
+  console.log('esbuild done', entryPath)
 
   if (bundled.outputFiles) {
     const decoder = new _string_decoder.StringDecoder('utf8');
