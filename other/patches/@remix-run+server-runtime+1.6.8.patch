diff --git a/node_modules/@remix-run/server-runtime/dist/data.js b/node_modules/@remix-run/server-runtime/dist/data.js
index 4ac203f..e117247 100644
--- a/node_modules/@remix-run/server-runtime/dist/data.js
+++ b/node_modules/@remix-run/server-runtime/dist/data.js
@@ -66,6 +66,7 @@ async function callRouteLoader({
   request
 }) {
   let loader = match.route.module.loader;
+  console.log(request.url, loader)
 
   if (!loader) {
     throw new Error(`You made a ${request.method} request to ${request.url} but did not provide ` + `a default component or \`loader\` for route "${match.route.id}", ` + `so there is no way to handle the request.`);
@@ -79,7 +80,9 @@ async function callRouteLoader({
       context: loadContext,
       params: match.params
     });
+    console.log(request.url, result)
   } catch (error) {
+    console.log(request.url, 'error', error)
     if (!responses.isResponse(error)) {
       throw error;
     }
diff --git a/node_modules/@remix-run/server-runtime/dist/server.js b/node_modules/@remix-run/server-runtime/dist/server.js
index 45c51be..5c5cc8b 100644
--- a/node_modules/@remix-run/server-runtime/dist/server.js
+++ b/node_modules/@remix-run/server-runtime/dist/server.js
@@ -27,10 +27,12 @@ const createRequestHandler = (build, mode$1) => {
   let serverMode = mode.isServerMode(mode$1) ? mode$1 : mode.ServerMode.Production;
   return async function requestHandler(request, loadContext) {
     let url = new URL(request.url);
+    console.log(request.url, 'requestHandler');
     let matches = routeMatching.matchServerRoutes(routes$1, url.pathname);
     let response;
 
     if (url.searchParams.has("_data")) {
+      console.log(request.url, 'handleDataRequest');
       response = await handleDataRequest({
         request,
         loadContext,
@@ -39,6 +41,7 @@ const createRequestHandler = (build, mode$1) => {
         serverMode
       });
     } else if (matches && !matches[matches.length - 1].route.module.default) {
+      console.log(request.url, 'resource request');
       response = await handleResourceRequest({
         request,
         loadContext,
@@ -46,6 +49,7 @@ const createRequestHandler = (build, mode$1) => {
         serverMode
       });
     } else {
+      console.log(request.url, 'handleDocumentRequest');
       response = await handleDocumentRequest({
         build,
         loadContext,
@@ -55,6 +59,7 @@ const createRequestHandler = (build, mode$1) => {
         serverMode
       });
     }
+    console.log(request.url, 'response created', response);
 
     if (request.method === "HEAD") {
       return new Response(null, {
@@ -436,6 +441,7 @@ async function handleResourceRequest({
   serverMode
 }) {
   let match = matches.slice(-1)[0];
+  console.log(request.url, 'handleResourceRequest', match);
 
   try {
     if (isActionRequest(request)) {
@@ -445,6 +451,7 @@ async function handleResourceRequest({
         request
       });
     } else {
+      console.log(request.url, 'data.callRouteLoader');
       return await data.callRouteLoader({
         match,
         loadContext,
@@ -452,6 +459,7 @@ async function handleResourceRequest({
       });
     }
   } catch (error) {
+    console.log(request.url, 'error', error)
     if (serverMode !== mode.ServerMode.Test) {
       console.error(error);
     }
